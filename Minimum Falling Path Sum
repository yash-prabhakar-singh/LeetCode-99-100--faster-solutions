931. Minimum Falling Path Sum

class Solution {
    int helper(int i, int j, int[][] dp, int[][] matrix, int n)
    {if(dp[i][j]!=Integer.MIN_VALUE)
        return dp[i][j];
        if(i==n-1)
        {   dp[i][j]= matrix[i][j];
            return matrix[i][j];}
        int a=Integer.MAX_VALUE; int b=Integer.MAX_VALUE; int c=Integer.MAX_VALUE;
        if(j-1>=0)
            a= matrix[i][j]+helper(i+1,j-1,dp,matrix,n);
        
            b= matrix[i][j]+helper(i+1,j,dp,matrix,n);
        
        if(j+1<n)
            c= matrix[i][j]+helper(i+1,j+1,dp,matrix,n);
     b=Math.min(a,b);
     b=Math.min(b,c);
     dp[i][j]=b;
     return b;
        
    }
    
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int[][] dp= new int[n][n];
        for(int i=0;i<n;i++)
            Arrays.fill(dp[i],Integer.MIN_VALUE);
        int m=0; int min=Integer.MAX_VALUE;
        for(int j=0;j<n;j++)
        {
            m=helper(0,j,dp,matrix,n);
            min=Math.min(m,min);
        }
        
        return min;
              
    }
}
