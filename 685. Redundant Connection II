class Solution {
    
    int[] num;
    
    boolean union(int[] a)
    {int x= find(a[0]);
     int y=find(a[1]);
     if(x==y)
         return true;
     else
     { num[y]=x; return false;}
         
        
    }
    
    int find(int a)
    {if(a==num[a])
     return a;
    else
        return find(num[a]);
    }
    public int[] findRedundantDirectedConnection(int[][] edges) {
        int nu[]= new int[edges.length+1];
         num= new int[edges.length+1];
        for(int i=0;i<nu.length;i++)
        { nu[i]=i;num[i]=i;}
        int o=0;
        int ar[]=null;
        for(int[] e: edges)
        { if(nu[e[1]]!=e[1])
        { ar= e; o=e[1];}
         else
             nu[e[1]]=e[0];}
        if(ar!=null)
        {
        Set<Integer> set= new HashSet<>();
        int k=0;set.add(o);
        while(nu[o]!=o)
        { k=nu[o];
         if(set.contains(k))
             return new int[]{nu[ar[1]],ar[1]};
        set.add(k);
         o=k;
        }
        return ar;
        }
        for (int[] u: edges)
        {if(union(u))
         return u;}
    return null;
        
    }
}
